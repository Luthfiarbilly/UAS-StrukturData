// Definisi struktur DoublyListNode
function DoublyListNode(val, prev = null, next = null) {
    this.val = val;
    this.prev = prev;
    this.next = next;
  }
  
  // Fungsi untuk menghapus semua node dengan nilai tertentu
  function removeElements(head, val) {
    let current = head;
  
    // Hapus node di awal linked list jika nilainya sama dengan val
    while (current !== null && current.val === val) {
      current = current.next;
    }
  
    // Jika linked list menjadi kosong
    if (current === null) {
      return null;
    }
  
    // Set head yang baru
    head = current;
    current.prev = null;
  
    // Iterasi melalui linked list
    while (current !== null) {
      if (current.val === val) {
        // Hapus node dengan nilai val
        current.prev.next = current.next;
        if (current.next !== null) {
          current.next.prev = current.prev;
        }
      }
      current = current.next;
    }
  
    return head;
  }
  
  // Membangun doubly linked list: 1 <-> 2 <-> 3 <-> 2 <-> 4
  const head = new DoublyListNode(1);
  head.next = new DoublyListNode(2, head);
  head.next.next = new DoublyListNode(3, head.next);
  head.next.next.next = new DoublyListNode(2, head.next.next);
  head.next.next.next.next = new DoublyListNode(4, head.next.next.next);
  
  // Menghapus semua node dengan nilai 2
  const newHead = removeElements(head, 2);
  
  // Mencetak nilai-nilai dalam linked list yang telah dimodifikasi
  let current = newHead;
  while (current !== null) {
    console.log(current.val); // Output: 1, 3, 4
    current = current.next;
  }
  
